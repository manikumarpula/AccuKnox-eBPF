// Code generated by bpf2go; DO NOT EDIT.
//go:build ignore

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDropPort returns the embedded CollectionSpec for dropPort.
func loadDropPort() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DropPortBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dropPort: %w", err)
	}

	return spec, nil
}

// loadDropPortObjects loads dropPort and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dropPortObjects
//	*dropPortPrograms
//	*dropPortMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDropPortObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDropPort()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dropPortSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dropPortSpecs struct {
	dropPortProgramSpecs
	dropPortMapSpecs
}

// dropPortSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dropPortProgramSpecs struct {
	DropTcpPort *ebpf.ProgramSpec `ebpf:"drop_tcp_port"`
}

// dropPortMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dropPortMapSpecs struct {
}

// dropPortObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDropPortObjects or ebpf.CollectionSpec.LoadAndAssign.
type dropPortObjects struct {
	dropPortPrograms
	dropPortMaps
}

func (o *dropPortObjects) Close() error {
	return _DropPortClose(
		&o.dropPortPrograms,
		&o.dropPortMaps,
	)
}

// dropPortMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDropPortObjects or ebpf.CollectionSpec.LoadAndAssign.
type dropPortMaps struct {
}

func (m *dropPortMaps) Close() error {
	return _DropPortClose()
}

// dropPortPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDropPortObjects or ebpf.CollectionSpec.LoadAndAssign.
type dropPortPrograms struct {
	DropTcpPort *ebpf.Program `ebpf:"drop_tcp_port"`
}

func (p *dropPortPrograms) Close() error {
	return _DropPortClose(
		p.DropTcpPort,
	)
}

func _DropPortClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dropport_bpf.o
var _DropPortBytes []byte
